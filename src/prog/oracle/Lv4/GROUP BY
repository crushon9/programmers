-- 식품분류별 가장 비싼 식품의 정보 조회하기
SELECT R.CATEGORY, R.PRICE, R.PRODUCT_NAME
FROM FOOD_PRODUCT R
INNER JOIN
(SELECT CATEGORY, MAX(PRICE) AS PRICE
            FROM FOOD_PRODUCT
            GROUP BY CATEGORY) a
ON a.CATEGORY = R.CATEGORY
AND a.PRICE = R.PRICE
WHERE R.CATEGORY IN ('과자', '국', '김치', '식용유')
ORDER BY R.PRICE DESC;


-- 서울에 위치한 식당 목록 출력하기
SELECT R.REST_ID, R.REST_NAME, R.FOOD_TYPE, R.FAVORITES, R.ADDRESS, A.SCORE
FROM REST_INFO R
INNER JOIN
(SELECT REST_ID, ROUND(AVG(REVIEW_SCORE),2) AS SCORE
            FROM REST_REVIEW
            GROUP BY REST_ID) a
ON a.REST_ID = R.REST_ID
WHERE R.ADDRESS LIKE '서울%'
ORDER BY SCORE DESC, VIEWS DESC;


-- 년, 월, 성별 별 상품 구매 회원 수 구하기
년, 월, 성별 별로 상품을 구매한 회원수를 집계하는 SQL문을 작성해주세요. -- 여러번 구매한 회원은 중복처리 해야함
SELECT
    YEAR,MONTH,GENDER,COUNT(*) AS USERS
FROM
    (SELECT DISTINCT
        EXTRACT(YEAR FROM R.SALES_DATE) AS YEAR,
        EXTRACT(MONTH FROM R.SALES_DATE) AS MONTH,
        A.GENDER,
        A.USER_ID
    FROM USER_INFO A
    INNER JOIN ONLINE_SALE R
    ON a.USER_ID = R.USER_ID
    WHERE A.GENDER IS NOT NULL)
GROUP BY YEAR,MONTH,GENDER
ORDER BY YEAR,MONTH,GENDER;


-- 저자 별 카테고리 별 매출액 집계하기
SELECT
A.AUTHOR_ID
,A.AUTHOR_NAME
,B.CATEGORY
,SUM(S.SALES * B.PRICE) AS SALES
FROM BOOK_SALES S
INNER JOIN BOOK B
ON B.BOOK_ID = S.BOOK_ID
INNER JOIN AUTHOR A
ON A.AUTHOR_ID = B.AUTHOR_ID
WHERE TO_CHAR(SALES_DATE,'YYYYMM') = '202201'
GROUP BY A.AUTHOR_ID, A.AUTHOR_NAME, B.CATEGORY
ORDER BY A.AUTHOR_ID, B.CATEGORY DESC;


-- 그룹별 조건에 맞는 식당 목록 출력하기
SELECT
MEMBER_NAME
,REVIEW_TEXT
,TO_CHAR(REVIEW_DATE,'YYYY-MM-DD') AS REVIEW_DATE
FROM REST_REVIEW A
INNER JOIN MEMBER_PROFILE B
ON A.MEMBER_ID = B.MEMBER_ID
INNER JOIN  (
            SELECT
            MEMBER_ID
            , COUNT(*) AS CNT
            FROM REST_REVIEW
            GROUP BY MEMBER_ID) C
ON C.MEMBER_ID = B.MEMBER_ID
AND CNT = (
            SELECT
            MAX(COUNT(*))
            FROM REST_REVIEW
            GROUP BY MEMBER_ID
          )
ORDER BY REVIEW_DATE, REVIEW_TEXT;